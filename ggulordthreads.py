from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import asyncpg
import asyncio

TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù_–ë–û–¢–ê"
ADMIN_ID = 123456789  # –£–∫–∞–∂–∏ —Å–≤–æ–π Telegram ID

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
async def create_db():
    return await asyncpg.create_pool(
        database="tg_bot_db",
        user="your_user",
        password="your_password",
        host="localhost"
    )

# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher()
db = None  # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø–æ–∑–∂–µ)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ì–∞–π–¥"), KeyboardButton(text="Gulo Vision")]],
    resize_keyboard=True
)

# –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞.", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–∞–π–¥"
@dp.message(lambda message: message.text == "–ì–∞–π–¥")
async def send_guide(message: types.Message):
    guide_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥"), KeyboardButton(text="–ü–æ–º–æ—â—å")]],
        resize_keyboard=True
    )
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ –±–ª–æ–≥–µ—Ä—Å—Ç–≤—É –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é!\n\n"
        "üìò –ì–∞–π–¥: [–ü–µ—Ä–µ–π—Ç–∏ –∫ –≥–∞–π–¥—É](https://docs.google.com/presentation/d/1kWBBM4I_wArYXtGrp0SwtmiFVj1uxwLfMTVtIu3RGYM/edit?usp=sharing)",
        reply_markup=guide_keyboard,
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
@dp.message(lambda message: message.text and "–ü–æ–º–æ—â—å" in message.text)
async def help_command(message: types.Message):
    await message.answer("ü§ñ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: [–°–≤—è–∑–∞—Ç—å—Å—è](https://t.me/pavel_gulo)", parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.message(lambda message: message.text and "–ù–∞–∑–∞–¥" in message.text)
async def back_to_main(message: types.Message):
    await message.answer("üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /getid (—Ç–æ–ª—å–∫–æ –¥–ª—è ADMIN_ID)
@dp.message(Command("getid"))
async def getid(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        async with db.acquire() as conn:
            users = await conn.fetch("SELECT user_id, username, message_count, clicked_buttons FROM users")
        
        if not users:
            await message.answer("‚õî –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return

        response = "üìä **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n"
        for user in users:
            response += f"üÜî ID: `{user['user_id']}`, Username: @{user['username']}, –°–æ–æ–±—â–µ–Ω–∏–π: {user['message_count']}, –ö–Ω–æ–ø–∫–∏: `{user['clicked_buttons']}`\n\n"

        await message.answer(response, parse_mode="Markdown")
    else:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    global db
    db = await create_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
