from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import asyncio
import logging
from aiogram import Router

API_TOKEN = "8181176657:AAFzf_yjbd6Np-SRd-E2hSTdKU1ZyNXiCuI"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()

# –•—Ä–∞–Ω–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
unique_users = set()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    unique_users.add(user_id)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ì–∞–π–¥"), KeyboardButton(text="Gulo Vision")]],
        resize_keyboard=True
    )
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ GGulord Vision!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ì–∞–π–¥\", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≥–∞–π–¥.\n"
        "–ù–∞–∂–º–∏—Ç–µ \"Gulo Vision\", —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∑–∞–∫—Ä—ã—Ç–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ.",
        reply_markup=keyboard
    )

# –ì–∞–π–¥
@router.message(lambda message: message.text == "–ì–∞–π–¥")
async def send_guide(message: types.Message):
    user_id = message.from_user.id
    unique_users.add(user_id)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥"), KeyboardButton(text="–ü–æ–º–æ—â—å")]],
        resize_keyboard=True
    )
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ –±–ª–æ–≥–µ—Ä—Å—Ç–≤—É –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é!\n\n"
        "üìò [–ì–∞–π–¥](https://docs.google.com/presentation/d/1kWBBM4I_wArYXtGrp0SwtmiFVj1uxwLfMTVtIu3RGYM/edit?usp=sharing)",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

# Gulo Vision
@router.message(lambda message: message.text == "Gulo Vision")
async def send_gulo_vision_info(message: types.Message):
    user_id = message.from_user.id
    unique_users.add(user_id)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url="https://linktw.in/SiXwAI")],
            [InlineKeyboardButton(text="–ö–µ–π—Å—ã –ü–∞–≤–ª–∞ –ì—É–ª–æ", url="https://t.me/+8XvQcRpxKMc4MGRi")],
            [InlineKeyboardButton(text="–ü–æ–º–æ—â—å", url="https://t.me/pavel_gulo")]
        ]
    )
    await message.answer(
        "üîπ **–ß—Ç–æ —Ç–∞–∫–æ–µ Gulo Vision?**\n\n"
        "Gulo Vision ‚Äî —ç—Ç–æ –∑–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –ø—Ä–æ–∫–∞—á–∞—Ç—å —Å–≤–æ–µ –º—ã—à–ª–µ–Ω–∏–µ, –Ω–∞—É—á–∏—Ç—å—Å—è –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —Å–≤–æ–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã."
        "\n\nüîó [–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Lava.top](https://linktw.in/SiXwAI)",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

# –ü–æ–º–æ—â—å
@router.message(lambda message: message.text == "–ü–æ–º–æ—â—å")
async def help_command(message: types.Message):
    await message.answer("–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @pavel_gulo")

# –ù–∞–∑–∞–¥
@router.message(lambda message: message.text == "–ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    await start(message)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@router.message(Command("stats"))
async def stats(message: types.Message):
    if message.from_user.id == 123456789:  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π ID
        count = len(unique_users)
        await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
dp.include_router(router)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
